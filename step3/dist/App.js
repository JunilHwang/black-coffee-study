!function(t){var e={};function s(n){if(e[n])return e[n].exports;var i=e[n]={i:n,l:!1,exports:{}};return t[n].call(i.exports,i,i.exports,s),i.l=!0,i.exports}s.m=t,s.c=e,s.d=function(t,e,n){s.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:n})},s.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},s.t=function(t,e){if(1&e&&(t=s(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var n=Object.create(null);if(s.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var i in t)s.d(n,i,function(e){return t[e]}.bind(null,i));return n},s.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return s.d(e,"a",e),e},s.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},s.p="",s(s.s=0)}([function(t,e,s){"use strict";s.r(e);const n=(t,e=document)=>e.querySelector(t),i=(t,e=document)=>[...e.querySelectorAll(t)],a=(t,e)=>e.closest(t),o=(t,e,s,n)=>{t.addEventListener(s,t=>{const s=t;var o;(o=s.target,i(e).includes(o)||a(e,o))&&n(s)})},d=t=>(t.split("?")[1]||"").split("&").reduce((t,e)=>{const[s,n]=e.split("=");return s&&n&&(t[s]=n),t},{});class r{constructor(t,e){this.$target=t,this.$props=e,this.$stores=[],this.$children={},this.render=(t=>{let e=-1;return s=>{clearTimeout(e),e=setTimeout(()=>t(s),1e3/60)}})(()=>{this.$target.innerHTML=this.template(),this.componentDidMount(),this.buildChildren()}),this.setup()}async setup(){await this.componentInit(),this.subscribeStore(),this.setEvent(),this.setState(this.$state)}subscribeStore(){this.$stores.forEach(t=>t.addObserver(this))}buildChildren(){i("[data-component]",this.$target).forEach(t=>{const e=t.dataset.component,{constructor:s,props:n}=this.$children[e];new s(t,n)})}componentInit(){}setEvent(){}componentDidMount(){}template(){return""}setState(t){this.$state={...this.$state,...t},this.render()}addEvent(t,e,s){o(this.$target,`[data-ref="${t}"]`,e,s)}}class c{constructor({state:t,getters:e={},mutations:s={},actions:n={}}){this.observers=new Set,this.$state=t,this.$getters=Object.entries(e).reduce((t,[e,s])=>(Object.defineProperty(t,e,{get:()=>s(this.$state)}),t),{}),this.mutations=s,this.actions=n}commit(t,e){const s={...this.$state};this.mutations[t](s,e),this.setState(s)}dispatch(t,e){return this.actions[t]({commit:(t,e)=>this.commit(t,e),dispatch:(t,e)=>this.dispatch(t,e),state:{...this.$state}},e)}addObserver(...t){t.forEach(t=>this.observers.add(t))}setState(t){this.$state={...t},this.observers.forEach(t=>t.render())}}const m=new class{constructor(t){this.baseURL=t}request(t,e="GET"){return fetch(`${this.baseURL}/${t}`,{method:e}).then(t=>t.json())}requestWithBody(t,e,s){const n={method:e,headers:{"Content-Type":"application/json"},body:JSON.stringify(s)};return fetch(`${this.baseURL}/${t}`,n).then(t=>t.json())}get(t){return this.request(t)}delete(t){return this.request(t,"DELETE")}post(t,e){return this.requestWithBody(t,"POST",e)}put(t,e){return this.requestWithBody(t,"PUT",e)}patch(t,e){return this.requestWithBody(t,"PATCH",e)}}("https://blackcoffee-todolist.df.r.appspot.com/api");var l=Object.freeze({fetchTeams:()=>m.get("teams"),fetchTeam:t=>m.get("teams/"+t),addTeam:t=>m.post("teams",{name:t}),addTeamMember:(t,e)=>m.post(`teams/${t}/members`,{name:e}),deleteTeam:t=>m.delete("teams/"+t)}),p=Object.freeze({fetchTodoList:({teamId:t,memberId:e})=>m.get(`teams/${t}/members/${e}`),addItem:({teamId:t,memberId:e,contents:s})=>m.post(`teams/${t}/members/${e}/items`,{contents:s}),toggleItem:({teamId:t,memberId:e,itemId:s})=>m.put(`teams/${t}/members/${e}/items/${s}/toggle`),updateItem:({teamId:t,memberId:e,itemId:s,contents:n})=>m.put(`teams/${t}/members/${e}/items/${s}`,{contents:n}),updateItemPriority:({teamId:t,memberId:e,itemId:s,priority:n})=>m.put(`teams/${t}/members/${e}/items/${s}/priority`,{priority:n}),deleteItem:({teamId:t,memberId:e,itemId:s})=>m.delete(`teams/${t}/members/${e}/items/${s}`),deleteAllItem:({teamId:t,memberId:e})=>m.delete(`teams/${t}/members/${e}/items`)});const u=new c({state:{_id:"",name:"",members:{},filterType:{},editing:"",openedAppendForm:!1},mutations:{INIT(t,{_id:e,name:s,members:n}){t._id=e,t.name=s;for(const e of n)t.members[e._id]={...e,todoList:(e.todoList||[]).filter(t=>null!==t)},t.filterType[e._id]="all"},SET_TODO_LIST(t,{memberId:e,todoList:s}){t.members[e].todoList=s},SET_EDITING(t,e){t.editing=e},SET_FILTER_TYPE(t,{memberId:e,filterType:s}){t.filterType[e]=s},SET_OPENED_MEMBER_APPEND_FORM(t,e){t.openedAppendForm=e}},getters:{membersByFilteredTodoList:({members:t,filterType:e})=>Object.entries(t).reduce((t,[s,{todoList:n}])=>({...t,[s]:n.filter(({isCompleted:t})=>"all"===e[s]||"priority"===e[s]||"completed"===e[s]&&t||"active"===e[s]&&!t)}),{})},actions:{async FETCH_TEAM({commit:t},e){t("INIT",await l.fetchTeam(e))},async FETCH_TODO_LIST({commit:t,state:{_id:e}},s){const{todoList:n}=await p.fetchTodoList({teamId:e,memberId:s});t("SET_TODO_LIST",{memberId:s,todoList:(n||[]).filter(t=>null!==t)})},ADD_ITEM:async({dispatch:t,state:{_id:e}},{memberId:s,contents:n})=>(await p.addItem({teamId:e,memberId:s,contents:n}),t("FETCH_TODO_LIST",s)),TOGGLE_ITEM:async({dispatch:t,state:{_id:e}},{memberId:s,itemId:n})=>(await p.toggleItem({teamId:e,memberId:s,itemId:n}),t("FETCH_TODO_LIST",s)),UPDATE_ITEM:async({dispatch:t,state:{_id:e}},{memberId:s,itemId:n,contents:i})=>(await p.updateItem({teamId:e,memberId:s,itemId:n,contents:i}),t("FETCH_TODO_LIST",s)),UPDATE_ITEM_PRIORITY:async({dispatch:t,state:{_id:e}},{memberId:s,itemId:n,priority:i})=>(await p.updateItemPriority({teamId:e,memberId:s,itemId:n,priority:i}),t("FETCH_TODO_LIST",s)),DELETE_ITEM:async({dispatch:t,state:{_id:e}},{memberId:s,itemId:n})=>(await p.deleteItem({teamId:e,memberId:s,itemId:n}),t("FETCH_TODO_LIST",s)),DELETE_ALL_ITEM:async({dispatch:t,state:{_id:e}},s)=>(await p.deleteAllItem({teamId:e,memberId:s}),t("FETCH_TODO_LIST",s)),ADD_TEAM_MEMBER:async({commit:t,state:{_id:e}},s)=>t("INIT",await l.addTeamMember(e,s))}}),h=class extends r{template(){const{name:t}=u.$state;return t?`\n        <span><strong>${t}</strong>'s Todo List</span>\n    `:""}},T=new c({state:{teams:[],openedAppendForm:!1},mutations:{SET_TEAMS(t,e){t.teams=e},SET_OPENED_TEAM_APPEND_FORM(t,e){t.openedAppendForm=e}},actions:{async FETCH_TEAMS({commit:t}){t("SET_TEAMS",await l.fetchTeams())},ADD_TEAM:async({dispatch:t},e)=>(await l.addTeam(e),t("FETCH_TEAMS"))}}),E=class extends r{template(){return'\n      <button id="add-user-button" class="ripple" data-ref="append">\n        <span class="material-icons">add</span>\n      </button>\n    '}setEvent(){this.addEvent("append","click",()=>u.commit("SET_OPENED_MEMBER_APPEND_FORM",!0))}},b={all:"전체보기",priority:"우선 순위",active:"해야할 일",completed:"완료한 일"},I=class extends r{get id(){return this.$props.id}get filterType(){return u.$state.filterType[this.id]}get filteredCount(){return u.$getters.membersByFilteredTodoList[this.id].length}componentInit(){this.$stores=[T]}template(){return`\n      <span class="todo-count">총 <strong>${this.filteredCount}</strong> 개</span>\n      <ul class="filters">\n        ${Object.entries(b).map(([t,e])=>`\n          <li>\n            <a href="#" ${this.filterType===t?' class="selected"':""} data-filter-type="${t}" data-ref="filter">${e}</a>\n          </li>\n        `).join("")}\n      </ul>\n      <button class="clear-completed" data-ref="delete-all">모두 삭제</button>\n    `}setEvent(){this.addEvent("filter","click",t=>{t.preventDefault(),u.commit("SET_FILTER_TYPE",{memberId:this.id,filterType:t.target.dataset.filterType})}),this.addEvent("delete-all","click",t=>{t.preventDefault(),u.dispatch("DELETE_ALL_ITEM",this.id)})}},f=class extends r{componentInit(){this.$stores=[T]}template(){return'\n      <input class="new-todo" placeholder="할 일을 입력해주세요." data-ref="appender" autofocus />\n    '}setEvent(){this.addEvent("appender","keyup",({key:t,target:e})=>{"Enter"===t&&(u.dispatch("ADD_ITEM",{memberId:this.$props.id,contents:e.value}),e.value="")})}},y=class extends r{get id(){return this.$props.id}get member(){return u.$state.members[this.id]}get filterType(){return u.$state.filterType[this.id]}get filteredItems(){const t=u.$getters.membersByFilteredTodoList[this.id];return"priority"===this.filterType&&t.sort((t,e)=>(t.priority||100)-(e.priority||100)),t}isEditingOf(t){return u.$state.editing===t}toggle(t){u.dispatch("TOGGLE_ITEM",{memberId:this.id,itemId:t})}remove(t){u.dispatch("DELETE_ITEM",{memberId:this.id,itemId:t})}editing(t){u.commit("SET_EDITING",t)}edited(t,e){u.dispatch("UPDATE_ITEM",{memberId:this.id,itemId:t,contents:e}),this.cancel()}cancel(){u.commit("SET_EDITING",null)}updatePriority(t,e){u.dispatch("UPDATE_ITEM_PRIORITY",{memberId:this.id,itemId:t,priority:e})}componentInit(){this.$stores=[u];const t={id:this.id};this.$children={TodoItemAppender:{constructor:f,props:t},TodoListFooter:{constructor:I,props:t}}}template(){return`\n      <h2>\n        <span><strong>${this.member.name}</strong>'s Todo List</span>\n      </h2>\n      <div class="todoapp">\n        <section data-component="TodoItemAppender" id="todo-item-appender" class="input-container"></section>\n        <section class="main">\n          <ul class="todo-list">\n            ${this.filteredItems.map(({_id:t,isCompleted:e,priority:s,contents:n})=>`\n              <li class="todo-list-item ${e?"completed":""} ${this.isEditingOf(t)?"editing":""}" data-id="${t}">\n                <div class="view">\n                  <input class="toggle" type="checkbox" data-ref="toggle" ${e?"checked":""} />\n                  <label class="label" data-ref="editing">\n                    <div class="chip-container">\n                      ${0===s?'\n                        <select class="chip select" data-ref="priority">\n                          <option value="0" selected>순위</option>\n                          <option value="1">1순위</option>\n                          <option value="2">2순위</option>\n                        </select>':`\n                        <span class="chip ${(t=>1===t?"primary":2===t?"secondary":0===t?"none":"")(s)}">${s}순위</span>                        \n                      `}\n                    </div>\n                    ${n}\n                  </label>\n                  <button class="destroy" data-ref="delete"></button>\n                </div>\n                <input class="edit" value="${n}" data-ref="edited" />\n              </li>\n            `).join("")}\n          </ul>\n        </section>\n        <div data-component="TodoListFooter" id="todo-list-footer" class="count-container"></div>\n      </div>\n    `}setEvent(){const t=t=>a("[data-id]",t).dataset.id;this.addEvent("toggle","change",({target:e})=>{this.toggle(t(e))}),this.addEvent("delete","click",({target:e})=>{this.remove(t(e))}),this.addEvent("editing","dblclick",({target:e})=>{this.editing(t(e))}),this.addEvent("edited","keypress",({key:e,target:s})=>{"Enter"===e&&this.edited(t(s),s.value)}),this.addEvent("edited","keyup",t=>{const{key:e}=t;"Escape"===e&&this.cancel()}),this.addEvent("priority","change",({target:e})=>{this.updatePriority(t(e),Number(e.value))})}},_=class extends r{get ids(){return Object.keys(u.$state.members)}componentInit(){this.$children={TodoMemberAppender:{constructor:E},...this.ids.reduce((t,e)=>(t["TodoList-"+e]={constructor:y,props:{id:e}},t),{})}}template(){return`\n      ${this.ids.map(t=>`\n        <li data-component="TodoList-${t}" class="todoapp-container"></li>\n      `).join("")}\n      <li id="todo-member-appender" data-component="TodoMemberAppender" class="add-user-button-container"></li>\n    `}},v=class extends r{close(){u.commit("SET_OPENED_MEMBER_APPEND_FORM",!1)}async appendTeam(t){try{await u.dispatch("ADD_TEAM_MEMBER",t),this.close()}catch(t){console.error(t)}}template(){const{openedAppendForm:t}=u.$state;return t?'\n      <div class="modal" data-ref="close">\n        <div class="modal-box">\n          <button type="button" class="modal-close-button" data-ref="close">×</button>\n          <h3 class="modal-title">멤버 추가하기</h3>\n          <div class="appendForm">\n            <input type="text" data-ref="team-name" />\n            <button type="button">추가하기</button>\n          </div>\n        </div>     \n      </div>\n    ':""}componentDidUpdate(){const t=this.$target;n(".modal-box",t).addEventListener("click",e=>{t===e.currentTarget&&e.stopPropagation()}),n("input",t).focus()}setEvent(){this.addEvent("close","click",()=>this.close()),this.addEvent("team-name","keyup",({key:t,target:e})=>{"Escape"===t&&this.close(),"Enter"===t&&this.appendTeam(e.value)})}},$=class extends r{async componentInit(){await u.dispatch("FETCH_TEAM",L.$query.id),this.$children={TodoHeader:{constructor:h},TodoListOfTeam:{constructor:_},TodoMemberAppendForm:{constructor:v}}}template(){return'\n      <h1 data-component="TodoHeader" id="user-title"></h1>\n      <ul data-component="TodoListOfTeam" id="todo-list-of-team" class="todoapp-list-container flex-column-container"></ul>\n      <div data-component="TodoMemberAppendForm" id="member-append-form"></div>\n    '}},g=class extends r{componentInit(){this.$stores=[T]}template(){const{teams:t}=T.$state;return`\n      ${t.map(({_id:t,name:e})=>`\n        <div class="team-card-container" data-id="${t}">\n          <a href="#!" class="card" data-ref="view">\n            <div class="card-title">\n              ${e}\n            </div>\n          </a>\n        </div>\n      `).join("")}\n      \n      <div class="add-team-button-container">\n        <button id="add-team-button" class="ripple" data-ref="add">\n          <span class="material-icons">add</span>\n        </button>\n      </div>\n    `}setEvent(){this.addEvent("view","click",t=>{t.preventDefault();const e=a("[data-id]",t.target).dataset.id;L.push("./kanban.html?id="+e)}),this.addEvent("add","click",()=>{T.commit("SET_OPENED_TEAM_APPEND_FORM",!0)})}},M=class extends r{close(){T.commit("SET_OPENED_TEAM_APPEND_FORM",!1)}async appendTeam(t){try{await T.dispatch("ADD_TEAM",t),this.close()}catch(t){console.error(t)}}componentInit(){this.$stores=[T]}template(){const{openedAppendForm:t}=T.$state;return t?'\n      <div class="modal" data-ref="close">\n        <div class="modal-box">\n          <button type="button" class="modal-close-button" data-ref="close">×</button>\n          <h3 class="modal-title">팀 추가하기</h3>\n          <div class="appendForm">\n            <input type="text" data-ref="team-name" />\n            <button type="button">추가하기</button>\n          </div>\n        </div>     \n      </div>\n    ':""}componentDidMount(){if(!T.$state.openedAppendForm)return;const{$target:t}=this;n(".modal-box",t).addEventListener("click",e=>{t===e.currentTarget&&e.stopPropagation()}),n("input",t).focus()}setEvent(){this.addEvent("close","click",()=>this.close()),this.addEvent("team-name","keyup",({key:t,target:e})=>{"Escape"===t&&this.close(),"Enter"===t&&this.appendTeam(e.value)})}},O=class extends r{async componentInit(){await T.dispatch("FETCH_TEAMS"),this.$children={TeamList:{constructor:g},TeamAppendForm:{constructor:M}}}template(){return'\n      <h1 id="user-title" data-username="eastjun">\n        <span><strong>Team</strong>\'s Todo Lists</span>\n      </h1>\n      <div data-component="TeamList" class="team-list-container"></div>\n      <div data-component="TeamAppendForm" id="team-append-form"></div>\n    '}},D=n("#app"),L=new class{constructor(t){this.callback=t,this.$query={},window.onpopstate=()=>this.load()}load(){const t=location.pathname.split("/").pop()||"";this.$query=d(location.search),this.callback(t)}push(t){const e=d(t);this.$query=e,this.callback(t),history.pushState(e,"",t)}}(t=>t.includes("index")||0===t.length?new O(D):t.includes("kanban")?new $(D):void 0);L.load()}]);