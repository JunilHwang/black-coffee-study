!function(t){var e={};function n(s){if(e[s])return e[s].exports;var a=e[s]={i:s,l:!1,exports:{}};return t[s].call(a.exports,a,a.exports,n),a.l=!0,a.exports}n.m=t,n.c=e,n.d=function(t,e,s){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:s})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var s=Object.create(null);if(n.r(s),Object.defineProperty(s,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var a in t)n.d(s,a,function(e){return t[e]}.bind(null,a));return s},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="",n(n.s=0)}([function(t,e,n){"use strict";n.r(e);const s=(t,e=document)=>e.querySelector(t),a=(t,e=document)=>[...e.querySelectorAll(t)],i=(t,e)=>e.closest(t),d=(t,e,n,s)=>{t.addEventListener(n,t=>{const n=t;var d;(d=n.target,a(e).includes(d)||i(e,d))&&s(n)})},o=t=>(t.split("?")[1]||"").split("&").reduce((t,e)=>{const[n,s]=e.split("=");return n&&s&&(t[n]=s),t},{});class r{constructor(t,e){this.$target=t,this.$props=e,this.$children={},this.render=()=>{this.$target.innerHTML=this.template(),this.buildChildren(),this.componentDidMount()},this.setup()}async setup(){await this.componentInit(),this.$state=p(this.$state||{}),this.setEvent(),l(this.render)}buildChildren(){a("[data-component]",this.$target).forEach(t=>{const e=t.dataset.component,{constructor:n,props:s}=this.$children[e];new n(t,s)})}componentInit(){}setEvent(){}componentDidMount(){}template(){return""}setState(t){Object.entries(t).forEach(([t,e])=>{this.$state[t]=e})}addEvent(t,e,n){d(this.$target,`[data-ref="${t}"]`,e,n)}}class c{constructor({state:t,getters:e={},mutations:n={},actions:s={}}){this.$state=p(t),this.$getters=Object.entries(e).reduce((t,[e,n])=>(Object.defineProperty(t,e,{get:()=>n(this.$state)}),t),{}),this.mutations=n,this.actions=s}commit(t,e){this.mutations[t](this.$state,e)}dispatch(t,e){return this.actions[t]({commit:(t,e)=>this.commit(t,e),dispatch:(t,e)=>this.dispatch(t,e),state:this.$state},e)}}let m=null;const l=t=>{m=(t=>{let e=-1;return n=>{cancelAnimationFrame(e),e=requestAnimationFrame(()=>t(n))}})(t),t(),m=null},p=t=>Object.entries(t).reduce((t,[e,n])=>((t,e,n)=>{if(!t)return;const s=new Set;let a=n&&"object"==typeof n?p(n):n;return Object.defineProperty(t,e,{enumerable:!0,configurable:!0,get:()=>(m&&s.add(m),a),set(t){JSON.stringify(t)!==JSON.stringify(a)&&(a=t&&"object"==typeof t?p(t):t,s.forEach(t=>t()))}}),t})(t,e,n),t),u=new class{constructor(t){this.baseURL=t}getUrlOf(t){const e=0===t.indexOf("/")?"":"/";return`${this.baseURL}${e}${t}`}request(t,e="GET"){return fetch(this.getUrlOf(t),{method:e}).then(t=>t.json())}requestWithBody(t,e,n){const s={method:e,headers:{"Content-Type":"application/json"},body:JSON.stringify(n)};return fetch(this.getUrlOf(t),s).then(t=>t.json())}get(t){return this.request(t)}delete(t){return this.request(t,"DELETE")}post(t,e){return this.requestWithBody(t,"POST",e)}put(t,e){return this.requestWithBody(t,"PUT",e)}patch(t,e){return this.requestWithBody(t,"PATCH",e)}}("https://js-todo-list-9ca3a.df.r.appspot.com/api");var h=Object.freeze({fetchTeams:()=>u.get("/teams"),fetchTeam:t=>u.get("/teams/"+t),addTeam:t=>u.post("/teams",{name:t}),addTeamMember:(t,e)=>u.post(`/teams/${t}/members`,{name:e}),deleteTeam:t=>u.delete("/teams/"+t),deleteTeamMember:(t,e)=>u.delete(`/teams/${t}/members/${e}`)}),E=Object.freeze({fetchTodoList:({teamId:t,memberId:e})=>u.get(`/teams/${t}/members/${e}`),addItem:({teamId:t,memberId:e,contents:n})=>u.post(`/teams/${t}/members/${e}/items`,{contents:n}),toggleItem:({teamId:t,memberId:e,itemId:n})=>u.put(`/teams/${t}/members/${e}/items/${n}/toggle`),updateItem:({teamId:t,memberId:e,itemId:n,contents:s})=>u.put(`/teams/${t}/members/${e}/items/${n}`,{contents:s}),updateItemPriority:({teamId:t,memberId:e,itemId:n,priority:s})=>u.put(`/users/${e}/items/${n}/priority`,{priority:s}),deleteItem:({teamId:t,memberId:e,itemId:n})=>u.delete(`/teams/${t}/members/${e}/items/${n}`),deleteAllItem:({teamId:t,memberId:e})=>u.delete(`/teams/${t}/members/${e}/items`)});const T=new c({state:{_id:"",name:"",members:{},filterType:{},editing:"",openedAppendForm:!1},mutations:{INIT(t,{_id:e,name:n,members:s}){t._id=e,t.name=n;const a={},i={};for(const t of s)a[t._id]={...t,todoList:(t.todoList||[]).filter(t=>null!==t)},i[t._id]="all";t.members=p(a),t.filterType=p(i)},SET_TODO_LIST(t,{memberId:e,todoList:n}){t.members[e].todoList=n},SET_EDITING(t,e){t.editing=e},SET_FILTER_TYPE(t,{memberId:e,filterType:n}){t.filterType[e]=n},SET_OPENED_MEMBER_APPEND_FORM(t,e){t.openedAppendForm=e}},getters:{membersByFilteredTodoList:({members:t,filterType:e})=>Object.entries(t).reduce((t,[n,{todoList:s}])=>({...t,[n]:s.filter(({isCompleted:t})=>"all"===e[n]||"priority"===e[n]||"completed"===e[n]&&t||"active"===e[n]&&!t)}),{})},actions:{async FETCH_TEAM({commit:t},e){t("INIT",await h.fetchTeam(e))},async FETCH_TODO_LIST({commit:t,state:{_id:e}},n){const{todoList:s}=await E.fetchTodoList({teamId:e,memberId:n});t("SET_TODO_LIST",{memberId:n,todoList:(s||[]).filter(t=>null!==t)})},ADD_ITEM:async({dispatch:t,state:{_id:e}},{memberId:n,contents:s})=>(await E.addItem({teamId:e,memberId:n,contents:s}),t("FETCH_TODO_LIST",n)),TOGGLE_ITEM:async({dispatch:t,state:{_id:e}},{memberId:n,itemId:s})=>(await E.toggleItem({teamId:e,memberId:n,itemId:s}),t("FETCH_TODO_LIST",n)),UPDATE_ITEM:async({dispatch:t,state:{_id:e}},{memberId:n,itemId:s,contents:a})=>(await E.updateItem({teamId:e,memberId:n,itemId:s,contents:a}),t("FETCH_TODO_LIST",n)),UPDATE_ITEM_PRIORITY:async({dispatch:t,state:{_id:e}},{memberId:n,itemId:s,priority:a})=>(await E.updateItemPriority({teamId:e,memberId:n,itemId:s,priority:a}),t("FETCH_TODO_LIST",n)),DELETE_ITEM:async({dispatch:t,state:{_id:e}},{memberId:n,itemId:s})=>(await E.deleteItem({teamId:e,memberId:n,itemId:s}),t("FETCH_TODO_LIST",n)),DELETE_ALL_ITEM:async({dispatch:t,state:{_id:e}},n)=>(await E.deleteAllItem({teamId:e,memberId:n}),t("FETCH_TODO_LIST",n)),ADD_TEAM_MEMBER:async({commit:t,state:{_id:e}},n)=>t("INIT",await h.addTeamMember(e,n)),DELETE_TEAM_MEMBER:async({dispatch:t,state:{_id:e}},n)=>(await h.deleteTeamMember(e,n),t("FETCH_TEAM",e))}}),b=new c({state:{teams:[],openedAppendForm:!1},mutations:{SET_TEAMS(t,e){t.teams=e},SET_OPENED_TEAM_APPEND_FORM(t,e){t.openedAppendForm=e}},actions:{async FETCH_TEAMS({commit:t}){t("SET_TEAMS",await h.fetchTeams())},ADD_TEAM:async({dispatch:t},e)=>(await h.addTeam(e),t("FETCH_TEAMS")),async REMOVE_TEAM({dispatch:t},e){await h.deleteTeam(e),alert("삭제되었습니다."),P.push("./")}}}),f=class extends r{template(){const{name:t}=T.$state;return t?`\n        <span><strong>${t}</strong>'s Todo List</span>\n        <button type="button" data-ref="removeMember">⌫</button>\n    `:""}setEvent(){this.addEvent("removeMember","click",()=>{confirm("현재 팀을 삭제하시겠습니까?")&&b.dispatch("REMOVE_TEAM",T.$state._id)})}},I=class extends r{template(){return'\n      <button id="add-user-button" class="ripple" data-ref="append">\n        <span class="material-icons">add</span>\n      </button>\n    '}setEvent(){this.addEvent("append","click",()=>T.commit("SET_OPENED_MEMBER_APPEND_FORM",!0))}},y={all:"전체보기",priority:"우선 순위",active:"해야할 일",completed:"완료한 일"},_=class extends r{get id(){return this.$props.id}get filterType(){return T.$state.filterType[this.id]}get filteredCount(){return T.$getters.membersByFilteredTodoList[this.id].length}template(){return`\n      <span class="todo-count">총 <strong>${this.filteredCount}</strong> 개</span>\n      <ul class="filters">\n        ${Object.entries(y).map(([t,e])=>`\n          <li>\n            <a href="#" ${this.filterType===t?' class="selected"':""} data-filter-type="${t}" data-ref="filter">${e}</a>\n          </li>\n        `).join("")}\n      </ul>\n      <button class="clear-completed" data-ref="delete-all">모두 삭제</button>\n    `}setEvent(){this.addEvent("filter","click",t=>{t.preventDefault(),T.commit("SET_FILTER_TYPE",{memberId:this.id,filterType:t.target.dataset.filterType})}),this.addEvent("delete-all","click",t=>{t.preventDefault(),T.dispatch("DELETE_ALL_ITEM",this.id)})}},v=class extends r{template(){return'\n      <input class="new-todo" placeholder="할 일을 입력해주세요." data-ref="appender" autofocus />\n    '}setEvent(){this.addEvent("appender","keyup",({key:t,target:e})=>{"Enter"===t&&(T.dispatch("ADD_ITEM",{memberId:this.$props.id,contents:e.value}),e.value="")})}},g=t=>"FIRST"===t?1:"SECOND"===t?2:3,$=class extends r{get id(){return this.$props.id}get member(){return T.$state.members[this.id]}get filterType(){return T.$state.filterType[this.id]}get filteredItems(){const t=T.$getters.membersByFilteredTodoList[this.id];return"priority"===this.filterType&&t.sort((t,e)=>g(t.priority)-g(e.priority)),t}isEditingOf(t){return T.$state.editing===t}toggle(t){T.dispatch("TOGGLE_ITEM",{memberId:this.id,itemId:t})}remove(t){T.dispatch("DELETE_ITEM",{memberId:this.id,itemId:t})}removeMember(){T.dispatch("DELETE_TEAM_MEMBER",this.id)}editing(t){T.commit("SET_EDITING",t)}edited(t,e){T.dispatch("UPDATE_ITEM",{memberId:this.id,itemId:t,contents:e}),this.cancel()}cancel(){T.commit("SET_EDITING",null)}updatePriority(t,e){T.dispatch("UPDATE_ITEM_PRIORITY",{memberId:this.id,itemId:t,priority:e})}componentInit(){const t={id:this.id};this.$children={TodoItemAppender:{constructor:v,props:t},TodoListFooter:{constructor:_,props:t}}}template(){return`\n      <h2>\n        <span><strong>${this.member.name}</strong>'s Todo List</span>\n        <button type="button" data-ref="removeMember">⌫</button>\n      </h2>\n      <div class="todoapp">\n        <section data-component="TodoItemAppender" id="todo-item-appender" class="input-container"></section>\n        <section class="main">\n          <ul class="todo-list">\n            ${this.filteredItems.map(({_id:t,isCompleted:e,priority:n,contents:s})=>`\n              <li class="todo-list-item ${e?"completed":""} ${this.isEditingOf(t)?"editing":""}" data-id="${t}">\n                <div class="view">\n                  <input class="toggle" type="checkbox" data-ref="toggle" ${e?"checked":""} />\n                  <label class="label" data-ref="editing">\n                    <div class="chip-container">\n                      ${"NONE"===n?'\n                        <select class="chip select" data-ref="priority">\n                          <option value="NONE" selected>순위</option>\n                          <option value="FIRST">1순위</option>\n                          <option value="SECOND">2순위</option>\n                        </select>':`\n                        <span class="chip ${(t=>"FIRST"===t?"primary":"SECOND"===t?"secondary":"NONE"===t?"none":"")(n)}">${n}순위</span>                        \n                      `}\n                    </div>\n                    ${s}\n                  </label>\n                  <button class="destroy" data-ref="delete"></button>\n                </div>\n                <input class="edit" value="${s}" data-ref="edited" />\n              </li>\n            `).join("")}\n          </ul>\n        </section>\n        <div data-component="TodoListFooter" id="todo-list-footer" class="count-container"></div>\n      </div>\n    `}setEvent(){const t=t=>i("[data-id]",t).dataset.id;this.addEvent("toggle","change",({target:e})=>{this.toggle(t(e))}),this.addEvent("delete","click",({target:e})=>{this.remove(t(e))}),this.addEvent("editing","dblclick",({target:e})=>{this.editing(t(e))}),this.addEvent("edited","keypress",({key:e,target:n})=>{"Enter"===e&&this.edited(t(n),n.value)}),this.addEvent("edited","keyup",t=>{const{key:e}=t;"Escape"===e&&this.cancel()}),this.addEvent("removeMember","click",()=>{confirm("정말로 삭제하시겠습니까?")&&this.removeMember()}),this.addEvent("priority","change",({target:e})=>{this.updatePriority(t(e),e.value)})}},M=class extends r{get ids(){return Object.keys(T.$state.members)}componentInit(){this.$children={TodoMemberAppender:{constructor:I},...this.ids.reduce((t,e)=>(t["TodoList-"+e]={constructor:$,props:{id:e}},t),{})}}template(){return`\n      ${this.ids.map(t=>`\n        <li data-component="TodoList-${t}" class="todoapp-container"></li>\n      `).join("")}\n      <li id="todo-member-appender" data-component="TodoMemberAppender" class="add-user-button-container"></li>\n    `}},O=class extends r{close(){T.commit("SET_OPENED_MEMBER_APPEND_FORM",!1)}async appendMember(t){try{await T.dispatch("ADD_TEAM_MEMBER",t),this.close()}catch(t){console.error(t)}}template(){const{openedAppendForm:t}=T.$state;return t?'\n      <div class="modal" data-ref="close">\n        <div class="modal-box">\n          <button type="button" class="modal-close-button" data-ref="close">×</button>\n          <h3 class="modal-title">멤버 추가하기</h3>\n          <form action="" data-ref="append">\n            <div class="appendForm">\n              <input type="text" data-ref="member-name" />\n              <button type="submit">추가하기</button>\n            </div>\n          </form>\n        </div>\n      </div>\n    ':""}componentDidMount(){if(!T.$state.openedAppendForm)return;const{$target:t}=this;s(".modal-box",t).addEventListener("click",t=>t.stopPropagation()),s("input",t).focus()}setEvent(){this.addEvent("close","click",()=>this.close()),this.addEvent("append","submit",t=>{t.preventDefault();const e=s("input",t.target).value;this.appendMember(e)}),this.addEvent("member-name","keyup",({key:t,target:e})=>{"Escape"===t&&this.close()})}},A=class extends r{async componentInit(){await T.dispatch("FETCH_TEAM",P.$query.id),this.$children={TodoHeader:{constructor:f},TodoListOfTeam:{constructor:M},TodoMemberAppendForm:{constructor:O}}}template(){return'\n      <h1 data-component="TodoHeader" id="user-title"></h1>\n      <ul data-component="TodoListOfTeam" id="todo-list-of-team" class="todoapp-list-container flex-column-container"></ul>\n      <div data-component="TodoMemberAppendForm" id="member-append-form"></div>\n    '}},D=class extends r{template(){const{teams:t}=b.$state;return`\n      ${t.map(({_id:t,name:e})=>`\n        <div class="team-card-container" data-id="${t}">\n          <a href="#!" class="card" data-ref="view">\n            <div class="card-title">\n              ${e}\n            </div>\n          </a>\n        </div>\n      `).join("")}\n      \n      <div class="add-team-button-container">\n        <button id="add-team-button" class="ripple" data-ref="add">\n          <span class="material-icons">add</span>\n        </button>\n      </div>\n    `}setEvent(){this.addEvent("view","click",t=>{t.preventDefault();const e=i("[data-id]",t.target).dataset.id;P.push("./kanban.html?id="+e)}),this.addEvent("add","click",()=>{b.commit("SET_OPENED_TEAM_APPEND_FORM",!0)})}},L=class extends r{close(){b.commit("SET_OPENED_TEAM_APPEND_FORM",!1)}async appendTeam(t){try{await b.dispatch("ADD_TEAM",t),this.close()}catch(t){console.error(t)}}template(){const{openedAppendForm:t}=b.$state;return t?'\n      <div class="modal" data-ref="close">\n        <div class="modal-box">\n          <button type="button" class="modal-close-button" data-ref="close">×</button>\n          <h3 class="modal-title">팀 추가하기</h3>\n          <form action="" data-ref="append">\n            <div class="appendForm">\n              <input type="text" data-ref="team-name" />\n              <button type="submit">추가하기</button>\n            </div>\n          </form>\n        </div>     \n      </div>\n    ':""}componentDidMount(){if(!b.$state.openedAppendForm)return;const{$target:t}=this;s(".modal-box",t).addEventListener("click",t=>{t.target.closest(".modal-box")&&t.stopPropagation()}),s("input",t).focus()}setEvent(){this.addEvent("close","click",()=>this.close()),this.addEvent("append","submit",t=>{t.preventDefault();const e=s("input",t.target).value;this.appendTeam(e)}),this.addEvent("team-name","keyup",({key:t,target:e})=>{"Escape"===t&&this.close()})}},S=class extends r{async componentInit(){await b.dispatch("FETCH_TEAMS"),this.$children={TeamList:{constructor:D},TeamAppendForm:{constructor:L}}}template(){return'\n      <h1 id="user-title" data-username="eastjun">\n        <span><strong>Team</strong>\'s Todo Lists</span>\n      </h1>\n      <div data-component="TeamList" class="team-list-container"></div>\n      <div data-component="TeamAppendForm" id="team-append-form"></div>\n    '}},F=s("#app"),P=new class{constructor(t){this.callback=t,this.$query={},window.onpopstate=()=>this.load()}load(){const t=location.pathname.split("/").pop()||"";this.$query=o(location.search),this.callback(t)}push(t){const e=o(t);this.$query=e,this.callback(t),history.pushState(e,"",t)}}(t=>t.includes("kanban")?new A(F):new S(F));P.load()}]);